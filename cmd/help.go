package cmd

import (
	"donbarrigon/make/cmd/color"
	"fmt"
)

func Help() {
	fmt.Println(color.Primary + "Make" + color.Reset)
	fmt.Println(color.Info + "Asistente cli inspirado en artisan de Laravel." + color.Reset)
	fmt.Println(color.Warning + "si estas viendo esto es por que el comando no existe o quieres ver el help" + color.Reset)
	fmt.Println("")
	fmt.Println(color.Primary + color.Bold + "comandos:" + color.Reset)
	fmt.Println(color.Secondary + "make help" + color.Reset + "           => muestra este mensaje")
	fmt.Println("")
	fmt.Println(color.Primary + " ===> comandos para crear el proyecto <===" + color.Reset)
	fmt.Println(color.Secondary + "make project" + color.Reset + "        => crea un nuevo proyecto")
	fmt.Println(color.Secondary + "make fork" + color.Reset + "           => crea un nuevo proyecto con fork al repo de github")
	fmt.Println(color.Secondary + "make merge upstream" + color.Reset + " => crea un nuevo proyecto")
	fmt.Println("")
	fmt.Println(color.Primary + " ===> comandos para correr el proyecto <===" + color.Reset)
	fmt.Println(color.Secondary + "make run" + color.Reset + "            => corre el proyecto en modo desarrollo")
	fmt.Println(color.Secondary + "make build" + color.Reset + "          => compila todo el proyecto en /dist")
	fmt.Println("")
	fmt.Println(color.Primary + " ===> comandos para el desarrollo <===" + color.Reset)
	fmt.Println("")
	fmt.Println(color.Primary + color.Bold + "uso:" + color.Reset)
	fmt.Println(color.Secondary + "make <comando> [<otro_comando>] [<dominio>.]<nombre>" + color.Reset)
	fmt.Println(color.Gray + "  <comando> y <nombre> son obligatorios; <otro_comando> y <dominio> son opcionales. El nombre es en snake_case." + color.Reset)

	fmt.Println("")
	fmt.Println(color.Primary + color.Bold + "comandos:" + color.Reset)
	fmt.Println("")
	fmt.Println(color.Secondary + "model" + color.Reset + "      => crea un template de un modelo")
	fmt.Println(color.Secondary + "migration" + color.Reset + "  => crea un template de migracion en el dominio <database>")
	fmt.Println(color.Secondary + "seed" + color.Reset + "       => crea un template de semilla en el dominio <database>")
	fmt.Println(color.Secondary + "repository" + color.Reset + " => crea un esqueleto de un repositorio")
	fmt.Println(color.Secondary + "resource" + color.Reset + "   => crea un esqueleto de un recurso")
	fmt.Println("")
	fmt.Println(color.Secondary + "view" + color.Reset + "       => crea los templates de una vista")
	fmt.Println(color.Secondary + "page" + color.Reset + "       => crea un esqueleto de pagina")
	fmt.Println(color.Secondary + "component" + color.Reset + "  => crea un esqueleto para un componente")
	fmt.Println("")
	fmt.Println(color.Secondary + "controller" + color.Reset + " => crea un esqueleto de controlador")
	fmt.Println(color.Secondary + "middleware" + color.Reset + " => crea un esqueleto middleware")
	fmt.Println(color.Secondary + "policy" + color.Reset + "     => crea un esqueleto de policy")
	fmt.Println(color.Secondary + "route" + color.Reset + "      => crea un esqueleto de route")
	fmt.Println(color.Secondary + "service" + color.Reset + "    => crea un esqueleto de service")
	fmt.Println(color.Secondary + "validator" + color.Reset + "  => crea un esqueleto de validator")
	fmt.Println("")
	fmt.Println(color.Secondary + "db" + color.Reset + "         => crea los templates (migrations, seeds, y model)")
	fmt.Println(color.Secondary + "handler" + color.Reset + "    => crea los templates (controller, policy, route y validator)")
	fmt.Println(color.Secondary + "ui" + color.Reset + "         => crea los templates (view, js, y css)")
	fmt.Println("")
	fmt.Println(color.Secondary + "mvc" + color.Reset + "        => crea los templates (db, ui, y handler)")
	fmt.Println(color.Secondary + "api" + color.Reset + "        => crea los templates (db y handler)")
	fmt.Println("")
	fmt.Println("")
}
